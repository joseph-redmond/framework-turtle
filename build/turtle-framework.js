// Generated by Haxe 4.3.4
(function ($global) { "use strict";
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var org_tturtle_framework_math_Math = function() {
};
org_tturtle_framework_math_Math.add = function() {
	var $l=arguments.length;
	var numbers = new Array($l>0?$l-0:0);
	for(var $i=0;$i<$l;++$i){numbers[$i-0]=arguments[$i];}
	var result = 0;
	var _g_current = 0;
	while(_g_current < numbers.length) result += numbers[_g_current++];
	return result;
};
org_tturtle_framework_math_Math.subtract = function() {
	var $l=arguments.length;
	var numbers = new Array($l>0?$l-0:0);
	for(var $i=0;$i<$l;++$i){numbers[$i-0]=arguments[$i];}
	var result = 0;
	var firstNum = true;
	var _g_current = 0;
	while(_g_current < numbers.length) {
		var number = numbers[_g_current++];
		if(firstNum) {
			result = number;
			firstNum = false;
			continue;
		}
		result -= number;
	}
	return result;
};
org_tturtle_framework_math_Math.multiply = function() {
	var $l=arguments.length;
	var numbers = new Array($l>0?$l-0:0);
	for(var $i=0;$i<$l;++$i){numbers[$i-0]=arguments[$i];}
	var result = 0;
	var firstNum = true;
	var _g_current = 0;
	while(_g_current < numbers.length) {
		var number = numbers[_g_current++];
		if(firstNum) {
			result = number;
			firstNum = false;
			continue;
		}
		result *= number;
	}
	return result;
};
org_tturtle_framework_math_Math.divide = function() {
	var $l=arguments.length;
	var numbers = new Array($l>0?$l-0:0);
	for(var $i=0;$i<$l;++$i){numbers[$i-0]=arguments[$i];}
	var result = 0;
	var firstNum = true;
	var _g_current = 0;
	while(_g_current < numbers.length) {
		var number = numbers[_g_current++];
		if(firstNum) {
			result = number;
			firstNum = false;
			continue;
		}
		result /= number;
	}
	return result;
};
org_tturtle_framework_math_Math.pow = function(number,power) {
	var starterNumber = number;
	var _g = 0;
	var _g1 = power - 1;
	while(_g < _g1) {
		++_g;
		number *= starterNumber;
	}
	return number;
};
org_tturtle_framework_math_Math.abs = function(number) {
	if(number < 0) {
		return -number;
	} else {
		return number;
	}
};
org_tturtle_framework_math_Math.prototype = {
	sin: function(x) {
		var result = 0;
		var term = x;
		var sign = -1;
		var power = x;
		var factorial = 1;
		var _g = 1;
		while(_g < 10) {
			var i = _g++;
			result += sign * term;
			power *= x * x;
			factorial *= 2 * i * (2 * i + 1);
			term *= power / factorial;
			sign *= -1;
		}
		return result;
	}
	,tan: function(x) {
		var result = 0;
		var term = x;
		var sign = 1;
		var prevResult = 0;
		var _g = 1;
		while(_g < 100) {
			result += sign * term;
			sign *= 1;
			term *= x * x / (2 * _g++ + 1);
			if(org_tturtle_framework_math_Math.abs(result - prevResult) < 0.000001) {
				break;
			}
			prevResult = result;
		}
		return result;
	}
	,sqrt: function(x) {
		if(x <= 0) {
			return 0;
		}
		var guess = x / 2;
		var prevGuess;
		do {
			prevGuess = guess;
			guess = (guess + x / guess) / 2;
		} while(!(org_tturtle_framework_math_Math.abs(guess - prevGuess) < 0.00001));
		return guess;
	}
	,round: function(x) {
		return x + 0.5 | 0;
	}
	,random: function() {
		var seed = new Date().getTime();
		seed = (seed | 0) * 1103515245 + 12345 & 2147483647;
		return seed / 2147483647;
	}
	,min: function(a,b) {
		if(a > b) {
			return a;
		} else {
			return b;
		}
	}
};
org_tturtle_framework_math_Math.PI = 3.14159265358979323846;
})({});
