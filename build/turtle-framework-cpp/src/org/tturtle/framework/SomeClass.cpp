// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_org_tturtle_framework_SomeClass
#include <org/tturtle/framework/SomeClass.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_602fb42fd0bf8fa8_4_SomeClass,"org.tturtle.framework.SomeClass","SomeClass",0x8ccdf962,"org.tturtle.framework.SomeClass.SomeClass","org/tturtle/framework/SomeClass.hx",4,0x22689a75)
HX_LOCAL_STACK_FRAME(_hx_pos_602fb42fd0bf8fa8_6_sayHello,"org.tturtle.framework.SomeClass","sayHello",0x2d994bc9,"org.tturtle.framework.SomeClass.sayHello","org/tturtle/framework/SomeClass.hx",6,0x22689a75)
namespace org{
namespace tturtle{
namespace framework{

void SomeClass_obj::__construct() { }

Dynamic SomeClass_obj::__CreateEmpty() { return new SomeClass_obj; }

void *SomeClass_obj::_hx_vtable = 0;

Dynamic SomeClass_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SomeClass_obj > _hx_result = new SomeClass_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SomeClass_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2114745a;
}

void SomeClass_obj::SomeClass(){
            	HX_STACKFRAME(&_hx_pos_602fb42fd0bf8fa8_4_SomeClass)
            	}


HX_DEFINE_DYNAMIC_FUNC0(SomeClass_obj,SomeClass,(void))

void SomeClass_obj::sayHello(){
            	HX_STACKFRAME(&_hx_pos_602fb42fd0bf8fa8_6_sayHello)
HXDLIN(   6)		::haxe::Log_obj::trace(HX_("Hello",f2,a2,ee,b7),::hx::SourceInfo(HX_("src/org/tturtle/framework/SomeClass.hx",00,10,ab,ba),6,HX_("org.tturtle.framework.SomeClass",cc,c7,f6,f5),HX_("sayHello",e7,8e,68,8c)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SomeClass_obj,sayHello,(void))


SomeClass_obj::SomeClass_obj()
{
}

::hx::Val SomeClass_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"SomeClass") ) { return ::hx::Val( SomeClass_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool SomeClass_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"sayHello") ) { outValue = sayHello_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *SomeClass_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *SomeClass_obj_sStaticStorageInfo = 0;
#endif

static ::String SomeClass_obj_sMemberFields[] = {
	HX_("SomeClass",84,70,59,23),
	::String(null()) };

::hx::Class SomeClass_obj::__mClass;

static ::String SomeClass_obj_sStaticFields[] = {
	HX_("sayHello",e7,8e,68,8c),
	::String(null())
};

void SomeClass_obj::__register()
{
	SomeClass_obj _hx_dummy;
	SomeClass_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("org.tturtle.framework.SomeClass",cc,c7,f6,f5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SomeClass_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(SomeClass_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SomeClass_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SomeClass_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SomeClass_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SomeClass_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace org
} // end namespace tturtle
} // end namespace framework
