// Generated by Haxe 4.3.4
#ifndef INCLUDED_org_tturtle_framework_SomeClass
#define INCLUDED_org_tturtle_framework_SomeClass

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(org,tturtle,framework,SomeClass)

namespace org{
namespace tturtle{
namespace framework{


class HXCPP_CLASS_ATTRIBUTES SomeClass_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef SomeClass_obj OBJ_;
		SomeClass_obj();

	public:
		enum { _hx_ClassId = 0x2114745a };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="org.tturtle.framework.SomeClass")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"org.tturtle.framework.SomeClass"); }

		inline static ::hx::ObjectPtr< SomeClass_obj > __new() {
			::hx::ObjectPtr< SomeClass_obj > __this = new SomeClass_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< SomeClass_obj > __alloc(::hx::Ctx *_hx_ctx) {
			SomeClass_obj *__this = (SomeClass_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SomeClass_obj), false, "org.tturtle.framework.SomeClass"));
			*(void **)__this = SomeClass_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~SomeClass_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("SomeClass",84,70,59,23); }

		static void sayHello();
		static ::Dynamic sayHello_dyn();

		void SomeClass();
		::Dynamic SomeClass_dyn();

};

} // end namespace org
} // end namespace tturtle
} // end namespace framework

#endif /* INCLUDED_org_tturtle_framework_SomeClass */ 
