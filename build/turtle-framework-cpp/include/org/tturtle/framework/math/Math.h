// Generated by Haxe 4.3.4
#ifndef INCLUDED_org_tturtle_framework_math_Math
#define INCLUDED_org_tturtle_framework_math_Math

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS4(org,tturtle,framework,math,Math)

namespace org{
namespace tturtle{
namespace framework{
namespace math{


class HXCPP_CLASS_ATTRIBUTES Math_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Math_obj OBJ_;
		Math_obj();

	public:
		enum { _hx_ClassId = 0x31f615a2 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="org.tturtle.framework.math.Math")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"org.tturtle.framework.math.Math"); }
		static ::hx::ObjectPtr< Math_obj > __new();
		static ::hx::ObjectPtr< Math_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Math_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Math",e8,6d,2f,33); }

		static void __boot();
		static Float PI;
		static Float add(::Array< Float > numbers);
		static ::Dynamic add_dyn();

		static Float subtract(::Array< Float > numbers);
		static ::Dynamic subtract_dyn();

		static Float multiply(::Array< Float > numbers);
		static ::Dynamic multiply_dyn();

		static Float divide(::Array< Float > numbers);
		static ::Dynamic divide_dyn();

		static Float pow(Float number,int power);
		static ::Dynamic pow_dyn();

		static Float abs(Float number);
		static ::Dynamic abs_dyn();

		Float sin(Float x);
		::Dynamic sin_dyn();

		Float tan(Float x);
		::Dynamic tan_dyn();

		Float sqrt(Float x);
		::Dynamic sqrt_dyn();

		int round(Float x);
		::Dynamic round_dyn();

		Float random();
		::Dynamic random_dyn();

		Float min(Float a,Float b);
		::Dynamic min_dyn();

};

} // end namespace org
} // end namespace tturtle
} // end namespace framework
} // end namespace math

#endif /* INCLUDED_org_tturtle_framework_math_Math */ 
